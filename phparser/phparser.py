from random import randrange
import requests
from lxml import html
import sys
import time
import logging

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

def random_headers(rand, url):
    if rand == False:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 11_4) AppleWebKit/537.36 '
                          '(KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36',
            'Referer': url
        }
    else:
        headers = {
            'User-Agent': f'Mozilla/{randrange(0, 50) / 10} (Macintosh; Intel Mac OS X {randrange(0, 9)}_{randrange(0, 9)}) AppleWebKit/{randrange(0, 999)}.{randrange(0, 99)} '
                          f'(KHTML, like Gecko) Chrome/{randrange(0, 99)}.{randrange(0, 9)}.{randrange(0, 9999)}.{randrange(0, 999)} Safari/{randrange(0, 999)}.{randrange(0, 99)}',
            'Referer': url
        }
    return headers


def get_href_last_video(url):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ html –∫–æ–¥–∞ —Å–∞–π—Ç–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–ª—É—á—à–∏–µ"
    try:
        response = requests.get(url, headers=random_headers(True, url))
        tree = html.document_fromstring(response.text)
    except Exception as ex:
        logging.error('ERROR in get response: ', ex)

    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ
    try:
        href_last_video = ''.join(tree.xpath('//*[@id="v429691991"]/div/div[3]/span/a/@href'))
        return href_last_video
    except Exception as ex:
        logging.error('ERROR in href_last_video: ', ex)


def get_href_for_download_video(url, tree):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
    try:
        href_for_download_video = '—Ö—É–π —Ç–µ–±–µ –æ–±–æ–π—Ç–∏ —ç—Ç–æ—Ç —ë–±–∞–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫, –±—É–¥—É –∑–∞–≤—Ç—Ä–∞ —Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ üëπ'
        logging.info(href_for_download_video)
        return href_for_download_video
    except Exception as ex:
        logging.error('ERROR in href_for_download_video: ', ex)


def get_preview_video(url, tree):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ
    try:
        preview_video = ''.join(tree.xpath(
            '/html/body/div[5]/div[2]/div[3]/div[1]/div[1]/div[1]/div[1]/video-element/div/div[14]/div[1]/picture/img/@href'))
        logging.info('–∑–∞–≤—Ç—Ä–∞ —Å–¥–µ–ª–∞—é —Å—Å—ã—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–≤—å—é –∏–±–æ –∑–∞—Ä—ã–ª—Å—è –≤ –ª–∏–±–µ re, –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Å—É–ø —Å–¥–µ–ª–∞—Ç—å')
        return preview_video
    except Exception as ex:
        logging.error('ERROR in href_for_download_video: ', ex)


def get_tags_video(url, tree):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—ç–≥–æ–≤ –≤–∏–¥–µ–æ
    try:
        tag = 1
        tags_video = []
        while tree.xpath(
                f'//*[@id="hd-leftColVideoPage"]/div[1]/div[6]/div[1]/div[4]/div[2]/div[2]/div[1]/a[{tag}]/text()') != []:
            tags_video.append('#' + ''.join(tree.xpath(
                f'//*[@id="hd-leftColVideoPage"]/div[1]/div[6]/div[1]/div[4]/div[2]/div[2]/div[1]/a[{tag}]/text()')).replace(
                ' ', ''))
            tag += 1
        tags_video = ' '.join(tags_video)
        logging.info(tags_video)
        return tags_video
    except Exception as ex:
        logging.error('ERROR in get_tags_video: ', ex)


def main():
    url = 'https://rt.pornhub.com/video?o=tr'
    logging.info('The bot has started working.')
    check_on_appearance_new_video_href = ''
    while True:
        href_last_video = get_href_last_video(url)
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        if href_last_video != check_on_appearance_new_video_href:
            current_href_last_video = f'https://rt.pornhub.com{href_last_video}'
            logging.info(current_href_last_video)
            try:  # –ø–æ–ª—É—á–µ–Ω–∏–µ html –∫–æ–¥–∞ —Å–∞–π—Ç–∞ —Å —Å–∞–º–∏–º –≤–∏–¥–µ–æ
                response = requests.get(current_href_last_video, headers=random_headers(True, url))
                tree = html.document_fromstring(response.text)
            except Exception as ex:
                logging.error('ERROR in get response: ', ex)
            get_href_for_download_video(current_href_last_video, tree)
            get_preview_video(current_href_last_video, tree)
            get_tags_video(current_href_last_video, tree)
        check_on_appearance_new_video_href = href_last_video
        time.sleep(10)


if __name__ == '__main__':
    main()
